* Starter kit additional stuff that should be loaded
#+begin_src emacs-lisp
  (starter-kit-load "python")
  (starter-kit-load "org")
  (starter-kit-load "yasnippet")
#+end_src
I don't like yasnippet everywhere, though.

#+begin_src emacs-lisp
  (yas-global-mode 0)
  (flyspell-mode)
#+end_src

* Aesthetics
** Theme
   Solarized is the best theme ever.

   Let's install it if needed:
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'color-theme-solarized)
#+end_src
   Now load it:
#+begin_src emacs-lisp
  (load-theme 'solarized-dark t)
#+end_src

** Rainbow delimiters
   Because life is colorless enough.

#+begin_src emacs-lisp
(starter-kit-install-if-needed 'rainbow-delimiters)
(global-rainbow-delimiters-mode)
#+end_src emacs-lisp

** Lost in stupid parenthesis
#+begin_src emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+end_src

** Line numbers
#+begin_src emacs-lisp
(global-linum-mode)
#+end_src

** Whitespace is from the devil
   Let's mark it, then.
#+begin_src emacs-lisp
  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face trailing tabs lines-tail))
  (global-whitespace-mode t)
#+end_src

** yes/no -> y/n
   Ain't nobody got the time for that!
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (set-variable 'confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

** Tabs
   Making tabs behave.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
#+END_SRC

** Fonts
   I'm blind, ok?
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 120)
#+end_src

** Column
   I like seeing the column number.
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

* Movement
** god mode
   God mode answers your prayers. Emacs + vim in a nice way.
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'god-mode)
  (require 'god-mode)
  (global-set-key (kbd "<escape>") 'god-local-mode)
#+end_src

** ace-jump
   Borrowed from vim also.
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'ace-jump-mode)
  (define-key global-map (kbd "C-c s") 'ace-jump-mode)
#+end_src

* Code completion
** autopair
   Who wants to close }?
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'autopair)
  (require 'autopair)
  (autopair-global-mode)
#+end_src

* Custom functions
** C-w deletes backward when not in region
#+begin_src language
(defadvice kill-region (before unix-werase activate compile)
  "When called interactively with no active region, delete a single word
    backwards instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (save-excursion (backward-word 1) (point)) (point)))))

#+end_src
** Make solarized work with daemon
#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
        (lambda (frame)
            (with-selected-frame frame
                (load-theme 'solarized-dark t))))
    (load-theme 'solarized-dark t))
#+end_src
* Orgmobile
  Let's see if this works.

#+begin_src emacs-lisp
  (setq org-directory "~/org/")
  (setq org-mobile-directory "~/Dropbox/MobileOrg/")
  (setq org-mobile-inbox-for-pull (concat org-directory "/index.org"))
  (setq org-mobile-files '("~/org/todos.org"))
#+end_src

  Do not like the american calendar format.
#+begin_src emacs-lisp
  (setq calendar-date-display-form '((if dayname (concat dayname " ")) day "/" monthname "/" year))
#+end_src

* C stuff
#+begin_src emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+end_src
* J
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'j-mode)
  (autoload 'j-mode "j-mode.el"  "Major mode for J." t)
  (autoload 'j-shell "j-mode.el" "Run J from emacs." t)
  (setq auto-mode-alist
        (cons '("\\.ij[rstp]" . j-mode) auto-mode-alist))
  (setq j-command "/usr/bin/jconsole")
  (setq j-console-cmd "jc")
  (setq j-path "~/j802-64/")
#+end_src
* Org-babel languages
#+begin_src emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (J . t)
       (emacs-lisp . t)
       ))
    (setq org-confirm-babel-evaluate nil)
    (setq org-src-lang-modes (quote (("J" . j) ("elisp" . emacs-lisp))))
#+end_src

